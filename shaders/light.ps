// Filename: light.ps
// GLOBALS
Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

// Two new global variables inside the LightBuffer that hold the diffuse color and the direction of the light.
// These two variables will be set from values in the new LightClass object.
cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;

    uint useTexture;
    uint useAmbientLight;
    uint useDiffuseLight;
    uint useSpecularLight;
    // float3 padding;
};

// TYPEDEFS
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float3 lightDir;
    float lightIntensity;
    float4 light;
    float4 color;
    float3 reflection;
    float4 specular;

    color = float4(1.0f, 0.0f, 0.0f, 0.0f);
    if (useTexture) {
        // Sample the pixel color from the texture using the sampler at this texture coordinate location.
        color = shaderTexture.Sample(SampleType, input.tex);
    }

    // Do these calculation only if lighting is needed
    if (useAmbientLight || useDiffuseLight || useSpecularLight) {
        // Invert the light direction for calculations.
        lightDir = -lightDirection;

        // Calculate the amount of light on this pixel.
        lightIntensity = saturate(dot(input.normal, lightDir));

        // diffuse color could be negative and it will subtract away some of the ambient color in the addition which is not correct.
        if (useAmbientLight && (lightIntensity > 0.0f)) {
            // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
            light = ambientColor + saturate(diffuseColor * lightIntensity);
        } else {
            // Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
            light = diffuseColor * lightIntensity;
        }

        // Saturate the final light color.
        light = saturate(light);

        if (useSpecularLight) {
            // Initialize the specular color.
            specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

            // Calculate the reflection vector based on the light intensity, normal vector, and light direction.
            reflection = normalize(2.0f * lightIntensity * input.normal - lightDir); 

            // Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
            specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
        }

        // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
        color = light * color;

        if (useSpecularLight) {
            // Add the specular component last to the output color.
            color = saturate(color + specular);
        }
    }

    return color;
}
