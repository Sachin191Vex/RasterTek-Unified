// Filename: light.ps

// DEFINES
#define MAX_DIFFUSE_LIGHTS 4

// GLOBALS
Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

// New global variables inside the LightBuffer that hold configuration, the diffuse color and the direction of the light.
// These variables will be set from values in the LightClass object.
cbuffer TextureConfig
{
    uint useTexture;
    float3 tmp;
};

cbuffer LightConfig
{
    uint useAmbientLight;
    uint useDiffuseLight;
    uint useSpecularLight;
    uint numDiffuseLights;
};

cbuffer LightParamBuffer
{
    // Paramaters for ambient light
    float4 ambientColor;

    // Paramaters for specular light
    float4 specularColor;

    // Paramaters for diffuse light
    float4 diffuseColor[MAX_DIFFUSE_LIGHTS];
    float specularPower;
    float padding[3];
};

// TYPEDEFS
struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 color : COLOR;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
    float3 diffuseLightDir[MAX_DIFFUSE_LIGHTS] : TEXCOORD2;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    uint i;
    bool useLighting;
    float4 color;
    float4 light;

    float  lightIntensity[MAX_DIFFUSE_LIGHTS];
    float3 reflection;
    float4 specular;

    // Initialize paramaters
    useLighting = false;
    if ( useAmbientLight || useDiffuseLight || useSpecularLight ) { useLighting = true; }

    color = input.color;
    if (useTexture) {
        // Sample the pixel color from the texture using the sampler at this texture coordinate location.
        color = shaderTexture.Sample(SampleType, input.tex);
    }

    // Do these calculation only if lighting is needed
    if ( useLighting ) {
        light = float4(0.0f, 0.0f, 0.0f, 1.0f);
        if (useAmbientLight) {
            // Set the default output color to the ambient light value for all pixels.
            light = ambientColor;
        }

        if (useDiffuseLight || useSpecularLight) {
            specular = float4(0.0, 0.0, 0.0, 1.0);

            // The light intensity for each of the point lights is calculated using the position
            // of the light and the normal vector. The amount of color contributed by each point light
            // is calculated from the intensity of the point light and the light color.
            for (i=0; i<numDiffuseLights; i++) {
                // Calculate the different amounts of light on this pixel based on the positions of the lights.
                lightIntensity[i] = saturate(dot(input.normal, input.diffuseLightDir[i]));

                if (lightIntensity[i] > 0.0f) {
                    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
                    light = saturate(light + diffuseColor[i] * lightIntensity[i]);

                    if (useSpecularLight) {
                        // Calculate the reflection vector based on the light intensity, normal vector, and light direction.
                        reflection = normalize(2.0f * lightIntensity[i] * input.normal - input.diffuseLightDir[i]);

                        // Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
                        specular = specularColor * pow(saturate(dot(reflection, input.viewDirection)), specularPower);
                    }
                }
            }

            // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
            // color = saturate(light * input.color + specular);
            color = saturate(light * color + specular);
        }
    }

    return color;
}
